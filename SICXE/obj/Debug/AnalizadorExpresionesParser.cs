//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Joan Hernández\Documents\Software de Sistemas\LAB\LABSW\SICXE\AnalizadorExpresiones.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXE {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class AnalizadorExpresionesParser : Parser {
	public const int
		T__0=1, T__1=2, ID=3, IDMAYUS=4, IGUAL=5, INT=6, MUL=7, DIV=8, ADD=9, 
		SUB=10, WS=11;
	public const int
		RULE_compileUnit = 0, RULE_expr = 1, RULE_atom = 2;
	public static readonly string[] ruleNames = {
		"compileUnit", "expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, null, "'='", null, "'*'", "'/'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ID", "IDMAYUS", "IGUAL", "INT", "MUL", "DIV", "ADD", 
		"SUB", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AnalizadorExpresiones.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AnalizadorExpresionesParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public double value;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AnalizadorExpresionesParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorExpresionesVisitor<TResult> typedVisitor = visitor as IAnalizadorExpresionesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; _localctx._expr = expr(0);
			State = 7; Match(Eof);
			 _localctx.value =  _localctx._expr.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public double value;
		public ExprContext left;
		public AtomContext _atom;
		public IToken op;
		public ExprContext right;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorExpresionesVisitor<TResult> typedVisitor = visitor as IAnalizadorExpresionesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 11; _localctx._atom = atom();
			 _localctx.value =  _localctx._atom.value; 
			}
			_ctx.stop = _input.Lt(-1);
			State = 26;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 24;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 14;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 15;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 16; _localctx.right = expr(4);
						 if ((_localctx.op!=null?_localctx.op.Text:null) == "*") _localctx.value =  _localctx.left.value * _localctx.right.value; else _localctx.value =  _localctx.left.value / _localctx.right.value; 
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 19;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 20;
						_localctx.op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 21; _localctx.right = expr(3);
						 if ((_localctx.op!=null?_localctx.op.Text:null) == "+") _localctx.value =  _localctx.left.value + _localctx.right.value; else _localctx.value =  _localctx.left.value - _localctx.right.value; 
						}
						break;
					}
					} 
				}
				State = 28;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public double value;
		public AtomContext _atom;
		public IToken _INT;
		public ExprContext e;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode INT() { return GetToken(AnalizadorExpresionesParser.INT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ID() { return GetToken(AnalizadorExpresionesParser.ID, 0); }
		public ITerminalNode IDMAYUS() { return GetToken(AnalizadorExpresionesParser.IDMAYUS, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAnalizadorExpresionesListener typedListener = listener as IAnalizadorExpresionesListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAnalizadorExpresionesVisitor<TResult> typedVisitor = visitor as IAnalizadorExpresionesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_atom);
		try {
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(SUB);
				State = 30; _localctx._atom = atom();
				 _localctx.value =  -_localctx._atom.value; 
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33; _localctx._INT = Match(INT);
				 _localctx.value =  double.Parse((_localctx._INT!=null?_localctx._INT.Text:null)); 
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; Match(T__0);
				State = 36; _localctx.e = expr(0);
				State = 37; Match(T__1);
				 _localctx.value =  _localctx.e.value; 
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 40; Match(ID);
				State = 41; Match(IGUAL);
				State = 42; _localctx.e = expr(0);
				 _localctx.value =  _localctx.e.value; 
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 45; Match(ID);
				 /* Implementa la l�gica para referencias a identificadores */ 
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 47; Match(IDMAYUS);
				State = 48; Match(IGUAL);
				State = 49; _localctx.e = expr(0);
				 _localctx.value =  _localctx.e.value; 
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 52; Match(IDMAYUS);
				 /* Implementa la l�gica para referencias a identificadores */ 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\r;\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x1B\n\x3"+
		"\f\x3\xE\x3\x1E\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x4\x2\x2\x3\x4\x5\x2"+
		"\x2\x4\x2\x6\x2\x2\x4\x3\x2\t\n\x3\x2\v\f?\x2\b\x3\x2\x2\x2\x4\f\x3\x2"+
		"\x2\x2\x6\x38\x3\x2\x2\x2\b\t\x5\x4\x3\x2\t\n\a\x2\x2\x3\n\v\b\x2\x1\x2"+
		"\v\x3\x3\x2\x2\x2\f\r\b\x3\x1\x2\r\xE\x5\x6\x4\x2\xE\xF\b\x3\x1\x2\xF"+
		"\x1C\x3\x2\x2\x2\x10\x11\f\x5\x2\x2\x11\x12\t\x2\x2\x2\x12\x13\x5\x4\x3"+
		"\x6\x13\x14\b\x3\x1\x2\x14\x1B\x3\x2\x2\x2\x15\x16\f\x4\x2\x2\x16\x17"+
		"\t\x3\x2\x2\x17\x18\x5\x4\x3\x5\x18\x19\b\x3\x1\x2\x19\x1B\x3\x2\x2\x2"+
		"\x1A\x10\x3\x2\x2\x2\x1A\x15\x3\x2\x2\x2\x1B\x1E\x3\x2\x2\x2\x1C\x1A\x3"+
		"\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x5\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1F"+
		" \a\f\x2\x2 !\x5\x6\x4\x2!\"\b\x4\x1\x2\"\x39\x3\x2\x2\x2#$\a\b\x2\x2"+
		"$\x39\b\x4\x1\x2%&\a\x3\x2\x2&\'\x5\x4\x3\x2\'(\a\x4\x2\x2()\b\x4\x1\x2"+
		")\x39\x3\x2\x2\x2*+\a\x5\x2\x2+,\a\a\x2\x2,-\x5\x4\x3\x2-.\b\x4\x1\x2"+
		".\x39\x3\x2\x2\x2/\x30\a\x5\x2\x2\x30\x39\b\x4\x1\x2\x31\x32\a\x6\x2\x2"+
		"\x32\x33\a\a\x2\x2\x33\x34\x5\x4\x3\x2\x34\x35\b\x4\x1\x2\x35\x39\x3\x2"+
		"\x2\x2\x36\x37\a\x6\x2\x2\x37\x39\b\x4\x1\x2\x38\x1F\x3\x2\x2\x2\x38#"+
		"\x3\x2\x2\x2\x38%\x3\x2\x2\x2\x38*\x3\x2\x2\x2\x38/\x3\x2\x2\x2\x38\x31"+
		"\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39\a\x3\x2\x2\x2\x5\x1A\x1C\x38";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXE
