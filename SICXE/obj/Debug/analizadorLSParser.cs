//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\emman\OneDrive\Documentos\Semestre 8\Laboratorio de Fundamentos de Software de Sistemas\PROYECTO REPOSITORIO\SICXE\SICXE\analizadorLS.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXE {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class analizadorLSParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		CODOPF1=18, CODOPF2=19, CODOPF3=20, REG=21, START=22, BYTE=23, WORD=24, 
		RESB=25, RESW=26, BASE=27, EQU=28, END=29, ORG=30, NUM=31, CONSTHEX=32, 
		VALOR=33, M=34, FINL=35, EXT=36, WS=37;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_proposicion = 2, RULE_instruccion = 3, 
		RULE_directiva = 4, RULE_opinstruccion = 5, RULE_tipodirectiva = 6, RULE_opvalor = 7, 
		RULE_expresion = 8, RULE_multiplicacion = 9, RULE_numero = 10, RULE_fin = 11, 
		RULE_etiqueta = 12, RULE_formato = 13, RULE_f1 = 14, RULE_f2 = 15, RULE_f3 = 16, 
		RULE_f4 = 17, RULE_simple3 = 18, RULE_indirecto3 = 19, RULE_inmediato3 = 20, 
		RULE_opdirectiva = 21;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "proposicion", "instruccion", "directiva", "opinstruccion", 
		"tipodirectiva", "opvalor", "expresion", "multiplicacion", "numero", "fin", 
		"etiqueta", "formato", "f1", "f2", "f3", "f4", "simple3", "indirecto3", 
		"inmediato3", "opdirectiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'0'", "'1'", "'-'", "'*'", "'/'", "'('", "')'", "','", "'X'", "'CLEAR'", 
		"'TIXR'", "'RSUB'", "'@'", "'#'", "'H'", "'''", "'C'", null, null, null, 
		null, "'START'", "'BYTE'", "'WORD'", "'RESB'", "'RESW'", "'BASE'", "'EQU'", 
		"'END'", "'ORG'", null, null, null, null, "'\n'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "CODOPF1", "CODOPF2", "CODOPF3", "REG", 
		"START", "BYTE", "WORD", "RESB", "RESW", "BASE", "EQU", "END", "ORG", 
		"NUM", "CONSTHEX", "VALOR", "M", "FINL", "EXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "analizadorLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public analizadorLSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(analizadorLSParser.Eof, 0); }
		public ITerminalNode FINL() { return GetToken(analizadorLSParser.FINL, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; inicio();
				State = 45; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; inicio();
				State = 48; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; proposicion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; fin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_proposicion);
		try {
			State = 58;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instruccion);
		try {
			State = 64;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; etiqueta();
				State = 61; opinstruccion();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case CODOPF1:
			case CODOPF2:
			case CODOPF3:
			case EXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63; opinstruccion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_directiva);
		try {
			State = 70;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; etiqueta();
				State = 67; tipodirectiva();
				}
				break;
			case START:
			case BYTE:
			case WORD:
			case RESB:
			case RESW:
			case BASE:
			case EQU:
			case ORG:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; tipodirectiva();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(analizadorLSParser.START, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public ITerminalNode BYTE() { return GetToken(analizadorLSParser.BYTE, 0); }
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(analizadorLSParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(analizadorLSParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(analizadorLSParser.RESW, 0); }
		public ITerminalNode BASE() { return GetToken(analizadorLSParser.BASE, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode EQU() { return GetToken(analizadorLSParser.EQU, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public ITerminalNode ORG() { return GetToken(analizadorLSParser.ORG, 0); }
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_tipodirectiva);
		try {
			State = 112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; Match(START);
				State = 75; Match(T__0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(START);
				State = 77; opvalor();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; Match(BYTE);
				State = 79; opdirectiva();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; Match(WORD);
				State = 81; opvalor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 82; Match(RESB);
				State = 83; opvalor();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 84; Match(RESW);
				State = 85; opvalor();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 86; Match(BASE);
				State = 87; Match(M);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 88; Match(WORD);
				State = 89; Match(NUM);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 90; Match(RESB);
				State = 91; Match(NUM);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 92; Match(RESW);
				State = 93; Match(NUM);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 94; Match(WORD);
				State = 95; Match(T__0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 96; Match(RESW);
				State = 97; Match(T__1);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 98; Match(RESW);
				State = 99; Match(T__0);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 100; Match(RESB);
				State = 101; Match(T__1);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 102; Match(RESB);
				State = 103; Match(T__0);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 104; Match(EQU);
				State = 105; expresion();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 106; Match(WORD);
				State = 107; expresion();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 108; Match(ORG);
				State = 109; Match(NUM);
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 110; Match(ORG);
				State = 111; opvalor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpvalorContext : ParserRuleContext {
		public ITerminalNode VALOR() { return GetToken(analizadorLSParser.VALOR, 0); }
		public OpvalorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opvalor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpvalor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpvalor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpvalor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpvalorContext opvalor() {
		OpvalorContext _localctx = new OpvalorContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_opvalor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(VALOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public MultiplicacionContext[] multiplicacion() {
			return GetRuleContexts<MultiplicacionContext>();
		}
		public MultiplicacionContext multiplicacion(int i) {
			return GetRuleContext<MultiplicacionContext>(i);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		ExpresionContext _localctx = new ExpresionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_expresion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; multiplicacion();
			State = 123;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__2 || _la==EXT) {
				{
				State = 121;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case EXT:
					{
					State = 117; Match(EXT);
					State = 118; multiplicacion();
					}
					break;
				case T__2:
					{
					State = 119; Match(T__2);
					State = 120; multiplicacion();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 125;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicacionContext : ParserRuleContext {
		public NumeroContext[] numero() {
			return GetRuleContexts<NumeroContext>();
		}
		public NumeroContext numero(int i) {
			return GetRuleContext<NumeroContext>(i);
		}
		public MultiplicacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicacion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterMultiplicacion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitMultiplicacion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicacionContext multiplicacion() {
		MultiplicacionContext _localctx = new MultiplicacionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_multiplicacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; numero();
			State = 133;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__3 || _la==T__4) {
				{
				State = 131;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case T__3:
					{
					State = 127; Match(T__3);
					State = 128; numero();
					}
					break;
				case T__4:
					{
					State = 129; Match(T__4);
					State = 130; numero();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeroContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public NumeroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numero; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterNumero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitNumero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumero(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeroContext numero() {
		NumeroContext _localctx = new NumeroContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_numero);
		try {
			State = 146;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; Match(NUM);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; Match(T__1);
				}
				break;
			case M:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; etiqueta();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 139; Match(T__2);
				State = 140; etiqueta();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 141; Match(T__5);
				State = 142; expresion();
				State = 143; Match(T__6);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 6);
				{
				State = 145; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(analizadorLSParser.END, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_fin);
		try {
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; Match(END);
				State = 149; etiqueta();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; Match(M);
				State = 151; Match(END);
				State = 152; etiqueta();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 153; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_etiqueta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_formato);
		try {
			State = 162;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CODOPF1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; f1();
				}
				break;
			case T__9:
			case T__10:
			case CODOPF2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; f2();
				}
				break;
			case T__11:
			case CODOPF3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; f3();
				}
				break;
			case EXT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode CODOPF1() { return GetToken(analizadorLSParser.CODOPF1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(CODOPF1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode CODOPF2() { return GetToken(analizadorLSParser.CODOPF2, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode[] REG() { return GetTokens(analizadorLSParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(analizadorLSParser.REG, i);
		}
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_f2);
		try {
			State = 202;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166; Match(CODOPF2);
				State = 167; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168; Match(CODOPF2);
				State = 169; Match(REG);
				State = 170; Match(T__7);
				State = 171; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; Match(CODOPF2);
				State = 173; Match(REG);
				State = 174; Match(T__7);
				State = 175; Match(NUM);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176; Match(CODOPF2);
				State = 177; Match(T__8);
				State = 178; Match(T__7);
				State = 179; Match(REG);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 180; Match(T__9);
				State = 181; Match(REG);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 182; Match(T__9);
				State = 183; Match(T__8);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 184; Match(CODOPF2);
				State = 185; Match(T__8);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 186; Match(CODOPF2);
				State = 187; Match(T__8);
				State = 188; Match(T__7);
				State = 189; Match(NUM);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190; Match(T__10);
				State = 191; Match(REG);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192; Match(CODOPF2);
				State = 193; Match(REG);
				State = 194; Match(T__7);
				State = 195; Match(T__8);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 196; Match(CODOPF2);
				State = 197; Match(NUM);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 198; Match(CODOPF2);
				State = 199; Match(REG);
				State = 200; Match(T__7);
				State = 201; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_f3);
		try {
			State = 207;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 204; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 206; inmediato3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public ITerminalNode EXT() { return GetToken(analizadorLSParser.EXT, 0); }
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_f4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(EXT);
			State = 210; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_simple3);
		try {
			State = 227;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(CODOPF3);
				State = 213; Match(M);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(CODOPF3);
				State = 215; Match(NUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216; Match(CODOPF3);
				State = 217; Match(NUM);
				State = 218; Match(T__7);
				State = 219; Match(T__8);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; Match(CODOPF3);
				State = 221; Match(M);
				State = 222; Match(T__7);
				State = 223; Match(T__8);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 224; Match(T__11);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 225; Match(CODOPF3);
				State = 226; expresion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 38, RULE_indirecto3);
		try {
			State = 241;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(CODOPF3);
				State = 230; Match(T__12);
				State = 231; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232; Match(CODOPF3);
				State = 233; Match(T__12);
				State = 234; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; Match(CODOPF3);
				State = 236; Match(T__12);
				State = 237; opvalor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; Match(CODOPF3);
				State = 239; Match(T__12);
				State = 240; expresion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 40, RULE_inmediato3);
		try {
			State = 255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; Match(CODOPF3);
				State = 244; Match(T__13);
				State = 245; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; Match(CODOPF3);
				State = 247; Match(T__13);
				State = 248; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; Match(CODOPF3);
				State = 250; Match(T__13);
				State = 251; opvalor();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 252; Match(CODOPF3);
				State = 253; Match(T__13);
				State = 254; expresion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(analizadorLSParser.CONSTHEX, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_opdirectiva);
		try {
			int _alt;
			State = 270;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; Match(T__14);
				State = 258; Match(T__15);
				State = 259; Match(CONSTHEX);
				State = 260; Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; Match(T__16);
				State = 262; Match(T__15);
				State = 266;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 263;
						MatchWildcard();
						}
						} 
					}
					State = 268;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
				}
				State = 269; Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\'\x113\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x35"+
		"\n\x2\x3\x3\x3\x3\x5\x3\x39\n\x3\x3\x4\x3\x4\x5\x4=\n\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x5\x5\x43\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6I\n\x6\x3\a\x3\a"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bs\n\b\x3\t\x3\t"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\a\n|\n\n\f\n\xE\n\x7F\v\n\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\a\v\x86\n\v\f\v\xE\v\x89\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\x95\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x9D"+
		"\n\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xA5\n\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xCD\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x5\x12\xD2\n\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x5\x14\xE6\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\xF4\n\x15\x3\x16"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x5\x16\x102\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\a\x17\x10B\n\x17\f\x17\xE\x17\x10E\v\x17\x3\x17\x5\x17\x111\n\x17"+
		"\x3\x17\x3\x10C\x2\x2\x18\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2"+
		"\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2"+
		"*\x2,\x2\x2\x2\x13B\x2\x34\x3\x2\x2\x2\x4\x38\x3\x2\x2\x2\x6<\x3\x2\x2"+
		"\x2\b\x42\x3\x2\x2\x2\nH\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEr\x3\x2\x2\x2\x10"+
		"t\x3\x2\x2\x2\x12v\x3\x2\x2\x2\x14\x80\x3\x2\x2\x2\x16\x94\x3\x2\x2\x2"+
		"\x18\x9C\x3\x2\x2\x2\x1A\x9E\x3\x2\x2\x2\x1C\xA4\x3\x2\x2\x2\x1E\xA6\x3"+
		"\x2\x2\x2 \xCC\x3\x2\x2\x2\"\xD1\x3\x2\x2\x2$\xD3\x3\x2\x2\x2&\xE5\x3"+
		"\x2\x2\x2(\xF3\x3\x2\x2\x2*\x101\x3\x2\x2\x2,\x110\x3\x2\x2\x2./\x5\x4"+
		"\x3\x2/\x30\a\x2\x2\x3\x30\x35\x3\x2\x2\x2\x31\x32\x5\x4\x3\x2\x32\x33"+
		"\a%\x2\x2\x33\x35\x3\x2\x2\x2\x34.\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x35"+
		"\x3\x3\x2\x2\x2\x36\x39\x5\x6\x4\x2\x37\x39\x5\x18\r\x2\x38\x36\x3\x2"+
		"\x2\x2\x38\x37\x3\x2\x2\x2\x39\x5\x3\x2\x2\x2:=\x5\b\x5\x2;=\x5\n\x6\x2"+
		"<:\x3\x2\x2\x2<;\x3\x2\x2\x2=\a\x3\x2\x2\x2>?\x5\x1A\xE\x2?@\x5\f\a\x2"+
		"@\x43\x3\x2\x2\x2\x41\x43\x5\f\a\x2\x42>\x3\x2\x2\x2\x42\x41\x3\x2\x2"+
		"\x2\x43\t\x3\x2\x2\x2\x44\x45\x5\x1A\xE\x2\x45\x46\x5\xE\b\x2\x46I\x3"+
		"\x2\x2\x2GI\x5\xE\b\x2H\x44\x3\x2\x2\x2HG\x3\x2\x2\x2I\v\x3\x2\x2\x2J"+
		"K\x5\x1C\xF\x2K\r\x3\x2\x2\x2LM\a\x18\x2\x2Ms\a\x3\x2\x2NO\a\x18\x2\x2"+
		"Os\x5\x10\t\x2PQ\a\x19\x2\x2Qs\x5,\x17\x2RS\a\x1A\x2\x2Ss\x5\x10\t\x2"+
		"TU\a\x1B\x2\x2Us\x5\x10\t\x2VW\a\x1C\x2\x2Ws\x5\x10\t\x2XY\a\x1D\x2\x2"+
		"Ys\a$\x2\x2Z[\a\x1A\x2\x2[s\a!\x2\x2\\]\a\x1B\x2\x2]s\a!\x2\x2^_\a\x1C"+
		"\x2\x2_s\a!\x2\x2`\x61\a\x1A\x2\x2\x61s\a\x3\x2\x2\x62\x63\a\x1C\x2\x2"+
		"\x63s\a\x4\x2\x2\x64\x65\a\x1C\x2\x2\x65s\a\x3\x2\x2\x66g\a\x1B\x2\x2"+
		"gs\a\x4\x2\x2hi\a\x1B\x2\x2is\a\x3\x2\x2jk\a\x1E\x2\x2ks\x5\x12\n\x2l"+
		"m\a\x1A\x2\x2ms\x5\x12\n\x2no\a \x2\x2os\a!\x2\x2pq\a \x2\x2qs\x5\x10"+
		"\t\x2rL\x3\x2\x2\x2rN\x3\x2\x2\x2rP\x3\x2\x2\x2rR\x3\x2\x2\x2rT\x3\x2"+
		"\x2\x2rV\x3\x2\x2\x2rX\x3\x2\x2\x2rZ\x3\x2\x2\x2r\\\x3\x2\x2\x2r^\x3\x2"+
		"\x2\x2r`\x3\x2\x2\x2r\x62\x3\x2\x2\x2r\x64\x3\x2\x2\x2r\x66\x3\x2\x2\x2"+
		"rh\x3\x2\x2\x2rj\x3\x2\x2\x2rl\x3\x2\x2\x2rn\x3\x2\x2\x2rp\x3\x2\x2\x2"+
		"s\xF\x3\x2\x2\x2tu\a#\x2\x2u\x11\x3\x2\x2\x2v}\x5\x14\v\x2wx\a&\x2\x2"+
		"x|\x5\x14\v\x2yz\a\x5\x2\x2z|\x5\x14\v\x2{w\x3\x2\x2\x2{y\x3\x2\x2\x2"+
		"|\x7F\x3\x2\x2\x2}{\x3\x2\x2\x2}~\x3\x2\x2\x2~\x13\x3\x2\x2\x2\x7F}\x3"+
		"\x2\x2\x2\x80\x87\x5\x16\f\x2\x81\x82\a\x6\x2\x2\x82\x86\x5\x16\f\x2\x83"+
		"\x84\a\a\x2\x2\x84\x86\x5\x16\f\x2\x85\x81\x3\x2\x2\x2\x85\x83\x3\x2\x2"+
		"\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x15"+
		"\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x95\a!\x2\x2\x8B\x95\a\x4\x2\x2\x8C"+
		"\x95\x5\x1A\xE\x2\x8D\x8E\a\x5\x2\x2\x8E\x95\x5\x1A\xE\x2\x8F\x90\a\b"+
		"\x2\x2\x90\x91\x5\x12\n\x2\x91\x92\a\t\x2\x2\x92\x95\x3\x2\x2\x2\x93\x95"+
		"\a\x6\x2\x2\x94\x8A\x3\x2\x2\x2\x94\x8B\x3\x2\x2\x2\x94\x8C\x3\x2\x2\x2"+
		"\x94\x8D\x3\x2\x2\x2\x94\x8F\x3\x2\x2\x2\x94\x93\x3\x2\x2\x2\x95\x17\x3"+
		"\x2\x2\x2\x96\x97\a\x1F\x2\x2\x97\x9D\x5\x1A\xE\x2\x98\x99\a$\x2\x2\x99"+
		"\x9A\a\x1F\x2\x2\x9A\x9D\x5\x1A\xE\x2\x9B\x9D\a\x1F\x2\x2\x9C\x96\x3\x2"+
		"\x2\x2\x9C\x98\x3\x2\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\x19\x3\x2\x2\x2\x9E"+
		"\x9F\a$\x2\x2\x9F\x1B\x3\x2\x2\x2\xA0\xA5\x5\x1E\x10\x2\xA1\xA5\x5 \x11"+
		"\x2\xA2\xA5\x5\"\x12\x2\xA3\xA5\x5$\x13\x2\xA4\xA0\x3\x2\x2\x2\xA4\xA1"+
		"\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\x1D\x3\x2\x2"+
		"\x2\xA6\xA7\a\x14\x2\x2\xA7\x1F\x3\x2\x2\x2\xA8\xA9\a\x15\x2\x2\xA9\xCD"+
		"\a!\x2\x2\xAA\xAB\a\x15\x2\x2\xAB\xAC\a\x17\x2\x2\xAC\xAD\a\n\x2\x2\xAD"+
		"\xCD\a\x17\x2\x2\xAE\xAF\a\x15\x2\x2\xAF\xB0\a\x17\x2\x2\xB0\xB1\a\n\x2"+
		"\x2\xB1\xCD\a!\x2\x2\xB2\xB3\a\x15\x2\x2\xB3\xB4\a\v\x2\x2\xB4\xB5\a\n"+
		"\x2\x2\xB5\xCD\a\x17\x2\x2\xB6\xB7\a\f\x2\x2\xB7\xCD\a\x17\x2\x2\xB8\xB9"+
		"\a\f\x2\x2\xB9\xCD\a\v\x2\x2\xBA\xBB\a\x15\x2\x2\xBB\xCD\a\v\x2\x2\xBC"+
		"\xBD\a\x15\x2\x2\xBD\xBE\a\v\x2\x2\xBE\xBF\a\n\x2\x2\xBF\xCD\a!\x2\x2"+
		"\xC0\xC1\a\r\x2\x2\xC1\xCD\a\x17\x2\x2\xC2\xC3\a\x15\x2\x2\xC3\xC4\a\x17"+
		"\x2\x2\xC4\xC5\a\n\x2\x2\xC5\xCD\a\v\x2\x2\xC6\xC7\a\x15\x2\x2\xC7\xCD"+
		"\a!\x2\x2\xC8\xC9\a\x15\x2\x2\xC9\xCA\a\x17\x2\x2\xCA\xCB\a\n\x2\x2\xCB"+
		"\xCD\a!\x2\x2\xCC\xA8\x3\x2\x2\x2\xCC\xAA\x3\x2\x2\x2\xCC\xAE\x3\x2\x2"+
		"\x2\xCC\xB2\x3\x2\x2\x2\xCC\xB6\x3\x2\x2\x2\xCC\xB8\x3\x2\x2\x2\xCC\xBA"+
		"\x3\x2\x2\x2\xCC\xBC\x3\x2\x2\x2\xCC\xC0\x3\x2\x2\x2\xCC\xC2\x3\x2\x2"+
		"\x2\xCC\xC6\x3\x2\x2\x2\xCC\xC8\x3\x2\x2\x2\xCD!\x3\x2\x2\x2\xCE\xD2\x5"+
		"&\x14\x2\xCF\xD2\x5(\x15\x2\xD0\xD2\x5*\x16\x2\xD1\xCE\x3\x2\x2\x2\xD1"+
		"\xCF\x3\x2\x2\x2\xD1\xD0\x3\x2\x2\x2\xD2#\x3\x2\x2\x2\xD3\xD4\a&\x2\x2"+
		"\xD4\xD5\x5\"\x12\x2\xD5%\x3\x2\x2\x2\xD6\xD7\a\x16\x2\x2\xD7\xE6\a$\x2"+
		"\x2\xD8\xD9\a\x16\x2\x2\xD9\xE6\a!\x2\x2\xDA\xDB\a\x16\x2\x2\xDB\xDC\a"+
		"!\x2\x2\xDC\xDD\a\n\x2\x2\xDD\xE6\a\v\x2\x2\xDE\xDF\a\x16\x2\x2\xDF\xE0"+
		"\a$\x2\x2\xE0\xE1\a\n\x2\x2\xE1\xE6\a\v\x2\x2\xE2\xE6\a\xE\x2\x2\xE3\xE4"+
		"\a\x16\x2\x2\xE4\xE6\x5\x12\n\x2\xE5\xD6\x3\x2\x2\x2\xE5\xD8\x3\x2\x2"+
		"\x2\xE5\xDA\x3\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3"+
		"\x3\x2\x2\x2\xE6\'\x3\x2\x2\x2\xE7\xE8\a\x16\x2\x2\xE8\xE9\a\xF\x2\x2"+
		"\xE9\xF4\a!\x2\x2\xEA\xEB\a\x16\x2\x2\xEB\xEC\a\xF\x2\x2\xEC\xF4\a$\x2"+
		"\x2\xED\xEE\a\x16\x2\x2\xEE\xEF\a\xF\x2\x2\xEF\xF4\x5\x10\t\x2\xF0\xF1"+
		"\a\x16\x2\x2\xF1\xF2\a\xF\x2\x2\xF2\xF4\x5\x12\n\x2\xF3\xE7\x3\x2\x2\x2"+
		"\xF3\xEA\x3\x2\x2\x2\xF3\xED\x3\x2\x2\x2\xF3\xF0\x3\x2\x2\x2\xF4)\x3\x2"+
		"\x2\x2\xF5\xF6\a\x16\x2\x2\xF6\xF7\a\x10\x2\x2\xF7\x102\a!\x2\x2\xF8\xF9"+
		"\a\x16\x2\x2\xF9\xFA\a\x10\x2\x2\xFA\x102\a$\x2\x2\xFB\xFC\a\x16\x2\x2"+
		"\xFC\xFD\a\x10\x2\x2\xFD\x102\x5\x10\t\x2\xFE\xFF\a\x16\x2\x2\xFF\x100"+
		"\a\x10\x2\x2\x100\x102\x5\x12\n\x2\x101\xF5\x3\x2\x2\x2\x101\xF8\x3\x2"+
		"\x2\x2\x101\xFB\x3\x2\x2\x2\x101\xFE\x3\x2\x2\x2\x102+\x3\x2\x2\x2\x103"+
		"\x104\a\x11\x2\x2\x104\x105\a\x12\x2\x2\x105\x106\a\"\x2\x2\x106\x111"+
		"\a\x12\x2\x2\x107\x108\a\x13\x2\x2\x108\x10C\a\x12\x2\x2\x109\x10B\v\x2"+
		"\x2\x2\x10A\x109\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10D\x3\x2\x2"+
		"\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2"+
		"\x10F\x111\a\x12\x2\x2\x110\x103\x3\x2\x2\x2\x110\x107\x3\x2\x2\x2\x111"+
		"-\x3\x2\x2\x2\x16\x34\x38<\x42Hr{}\x85\x87\x94\x9C\xA4\xCC\xD1\xE5\xF3"+
		"\x101\x10C\x110";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXE
