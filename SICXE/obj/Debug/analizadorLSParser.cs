//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\emman\OneDrive\Documentos\Semestre 8\Laboratorio de Fundamentos de Software de Sistemas\PROYECTO REPOSITORIO\SICXE\SICXE\analizadorLS.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SICXE {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class analizadorLSParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		CODOPF1=18, CODOPF2=19, CODOPF3=20, REG=21, START=22, BYTE=23, WORD=24, 
		RESB=25, RESW=26, BASE=27, EQU=28, END=29, NUM=30, CONSTHEX=31, VALOR=32, 
		M=33, FINL=34, EXT=35, WS=36;
	public const int
		RULE_programa = 0, RULE_inicio = 1, RULE_proposicion = 2, RULE_instruccion = 3, 
		RULE_directiva = 4, RULE_opinstruccion = 5, RULE_tipodirectiva = 6, RULE_opvalor = 7, 
		RULE_expresion = 8, RULE_fin = 9, RULE_etiqueta = 10, RULE_formato = 11, 
		RULE_f1 = 12, RULE_f2 = 13, RULE_f3 = 14, RULE_f4 = 15, RULE_simple3 = 16, 
		RULE_indirecto3 = 17, RULE_inmediato3 = 18, RULE_opdirectiva = 19;
	public static readonly string[] ruleNames = {
		"programa", "inicio", "proposicion", "instruccion", "directiva", "opinstruccion", 
		"tipodirectiva", "opvalor", "expresion", "fin", "etiqueta", "formato", 
		"f1", "f2", "f3", "f4", "simple3", "indirecto3", "inmediato3", "opdirectiva"
	};

	private static readonly string[] _LiteralNames = {
		null, "'0'", "'1'", "'*'", "'-'", "'/'", "'('", "')'", "','", "'X'", "'CLEAR'", 
		"'TIXR'", "'RSUB'", "'@'", "'#'", "'H'", "'''", "'C'", null, null, null, 
		null, "'START'", "'BYTE'", "'WORD'", "'RESB'", "'RESW'", "'BASE'", "'EQU'", 
		"'END'", null, null, null, null, "'\n'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "CODOPF1", "CODOPF2", "CODOPF3", "REG", 
		"START", "BYTE", "WORD", "RESB", "RESW", "BASE", "EQU", "END", "NUM", 
		"CONSTHEX", "VALOR", "M", "FINL", "EXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "analizadorLS.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public analizadorLSParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramaContext : ParserRuleContext {
		public InicioContext inicio() {
			return GetRuleContext<InicioContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(analizadorLSParser.Eof, 0); }
		public ITerminalNode FINL() { return GetToken(analizadorLSParser.FINL, 0); }
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_programa);
		try {
			State = 46;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; inicio();
				State = 41; Match(Eof);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; inicio();
				State = 44; Match(FINL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InicioContext : ParserRuleContext {
		public ProposicionContext proposicion() {
			return GetRuleContext<ProposicionContext>(0);
		}
		public FinContext fin() {
			return GetRuleContext<FinContext>(0);
		}
		public InicioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inicio; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInicio(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInicio(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInicio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InicioContext inicio() {
		InicioContext _localctx = new InicioContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_inicio);
		try {
			State = 50;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; proposicion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; fin();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProposicionContext : ParserRuleContext {
		public InstruccionContext instruccion() {
			return GetRuleContext<InstruccionContext>(0);
		}
		public DirectivaContext directiva() {
			return GetRuleContext<DirectivaContext>(0);
		}
		public ProposicionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proposicion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterProposicion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitProposicion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProposicion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProposicionContext proposicion() {
		ProposicionContext _localctx = new ProposicionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_proposicion);
		try {
			State = 54;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; instruccion();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; directiva();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstruccionContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public OpinstruccionContext opinstruccion() {
			return GetRuleContext<OpinstruccionContext>(0);
		}
		public InstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstruccionContext instruccion() {
		InstruccionContext _localctx = new InstruccionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instruccion);
		try {
			State = 60;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; etiqueta();
				State = 57; opinstruccion();
				}
				break;
			case T__9:
			case T__10:
			case T__11:
			case CODOPF1:
			case CODOPF2:
			case CODOPF3:
			case EXT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; opinstruccion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectivaContext : ParserRuleContext {
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public TipodirectivaContext tipodirectiva() {
			return GetRuleContext<TipodirectivaContext>(0);
		}
		public DirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterDirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitDirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectivaContext directiva() {
		DirectivaContext _localctx = new DirectivaContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_directiva);
		try {
			State = 66;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case M:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; etiqueta();
				State = 63; tipodirectiva();
				}
				break;
			case START:
			case BYTE:
			case WORD:
			case RESB:
			case RESW:
			case BASE:
			case EQU:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; tipodirectiva();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpinstruccionContext : ParserRuleContext {
		public FormatoContext formato() {
			return GetRuleContext<FormatoContext>(0);
		}
		public OpinstruccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opinstruccion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpinstruccion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpinstruccion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpinstruccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpinstruccionContext opinstruccion() {
		OpinstruccionContext _localctx = new OpinstruccionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_opinstruccion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; formato();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TipodirectivaContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(analizadorLSParser.START, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public ITerminalNode BYTE() { return GetToken(analizadorLSParser.BYTE, 0); }
		public OpdirectivaContext opdirectiva() {
			return GetRuleContext<OpdirectivaContext>(0);
		}
		public ITerminalNode WORD() { return GetToken(analizadorLSParser.WORD, 0); }
		public ITerminalNode RESB() { return GetToken(analizadorLSParser.RESB, 0); }
		public ITerminalNode RESW() { return GetToken(analizadorLSParser.RESW, 0); }
		public ITerminalNode BASE() { return GetToken(analizadorLSParser.BASE, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode EQU() { return GetToken(analizadorLSParser.EQU, 0); }
		public ExpresionContext expresion() {
			return GetRuleContext<ExpresionContext>(0);
		}
		public TipodirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tipodirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterTipodirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitTipodirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTipodirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TipodirectivaContext tipodirectiva() {
		TipodirectivaContext _localctx = new TipodirectivaContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_tipodirectiva);
		try {
			State = 102;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; Match(START);
				State = 71; Match(T__0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; Match(START);
				State = 73; opvalor();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74; Match(BYTE);
				State = 75; opdirectiva();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 76; Match(WORD);
				State = 77; opvalor();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78; Match(RESB);
				State = 79; opvalor();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 80; Match(RESW);
				State = 81; opvalor();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 82; Match(BASE);
				State = 83; Match(M);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 84; Match(WORD);
				State = 85; Match(NUM);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 86; Match(RESB);
				State = 87; Match(NUM);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 88; Match(RESW);
				State = 89; Match(NUM);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 90; Match(WORD);
				State = 91; Match(T__0);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 92; Match(RESW);
				State = 93; Match(T__1);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 94; Match(RESW);
				State = 95; Match(T__0);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 96; Match(RESB);
				State = 97; Match(T__1);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 98; Match(RESB);
				State = 99; Match(T__0);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 100; Match(EQU);
				State = 101; expresion(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpvalorContext : ParserRuleContext {
		public ITerminalNode VALOR() { return GetToken(analizadorLSParser.VALOR, 0); }
		public OpvalorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opvalor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpvalor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpvalor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpvalor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpvalorContext opvalor() {
		OpvalorContext _localctx = new OpvalorContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_opvalor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(VALOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpresionContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ExpresionContext[] expresion() {
			return GetRuleContexts<ExpresionContext>();
		}
		public ExpresionContext expresion(int i) {
			return GetRuleContext<ExpresionContext>(i);
		}
		public ExpresionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expresion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitExpresion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpresionContext expresion() {
		return expresion(0);
	}

	private ExpresionContext expresion(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpresionContext _localctx = new ExpresionContext(_ctx, _parentState);
		ExpresionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expresion, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				State = 107; Match(NUM);
				}
				break;

			case 2:
				{
				State = 108; etiqueta();
				State = 109; Match(T__2);
				State = 110; expresion(9);
				}
				break;

			case 3:
				{
				State = 112; etiqueta();
				State = 113; Match(T__3);
				State = 114; expresion(8);
				}
				break;

			case 4:
				{
				State = 116; etiqueta();
				State = 117; Match(T__4);
				State = 118; expresion(7);
				}
				break;

			case 5:
				{
				State = 120; etiqueta();
				State = 121; Match(EXT);
				State = 122; expresion(6);
				}
				break;

			case 6:
				{
				State = 124; Match(T__5);
				State = 125; expresion(0);
				State = 126; Match(T__6);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 144;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 142;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 130;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 131; Match(T__2);
						State = 132; expresion(5);
						}
						break;

					case 2:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 133;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 134; Match(T__3);
						State = 135; expresion(4);
						}
						break;

					case 3:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 136;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 137; Match(T__4);
						State = 138; expresion(3);
						}
						break;

					case 4:
						{
						_localctx = new ExpresionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expresion);
						State = 139;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 140; Match(EXT);
						State = 141; expresion(2);
						}
						break;
					}
					} 
				}
				State = 146;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FinContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(analizadorLSParser.END, 0); }
		public EtiquetaContext etiqueta() {
			return GetRuleContext<EtiquetaContext>(0);
		}
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public FinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFin(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinContext fin() {
		FinContext _localctx = new FinContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_fin);
		try {
			State = 153;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(END);
				State = 148; etiqueta();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; Match(M);
				State = 150; Match(END);
				State = 151; etiqueta();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; Match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EtiquetaContext : ParserRuleContext {
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public EtiquetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_etiqueta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterEtiqueta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitEtiqueta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEtiqueta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EtiquetaContext etiqueta() {
		EtiquetaContext _localctx = new EtiquetaContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_etiqueta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(M);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatoContext : ParserRuleContext {
		public F1Context f1() {
			return GetRuleContext<F1Context>(0);
		}
		public F2Context f2() {
			return GetRuleContext<F2Context>(0);
		}
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context f4() {
			return GetRuleContext<F4Context>(0);
		}
		public FormatoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formato; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterFormato(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitFormato(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormato(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatoContext formato() {
		FormatoContext _localctx = new FormatoContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_formato);
		try {
			State = 161;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case CODOPF1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; f1();
				}
				break;
			case T__9:
			case T__10:
			case CODOPF2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; f2();
				}
				break;
			case T__11:
			case CODOPF3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159; f3();
				}
				break;
			case EXT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160; f4();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F1Context : ParserRuleContext {
		public ITerminalNode CODOPF1() { return GetToken(analizadorLSParser.CODOPF1, 0); }
		public F1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f1; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F1Context f1() {
		F1Context _localctx = new F1Context(_ctx, State);
		EnterRule(_localctx, 24, RULE_f1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(CODOPF1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F2Context : ParserRuleContext {
		public ITerminalNode CODOPF2() { return GetToken(analizadorLSParser.CODOPF2, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode[] REG() { return GetTokens(analizadorLSParser.REG); }
		public ITerminalNode REG(int i) {
			return GetToken(analizadorLSParser.REG, i);
		}
		public F2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F2Context f2() {
		F2Context _localctx = new F2Context(_ctx, State);
		EnterRule(_localctx, 26, RULE_f2);
		try {
			State = 199;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(CODOPF2);
				State = 166; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167; Match(CODOPF2);
				State = 168; Match(REG);
				State = 169; Match(T__7);
				State = 170; Match(REG);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171; Match(CODOPF2);
				State = 172; Match(REG);
				State = 173; Match(T__7);
				State = 174; Match(NUM);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; Match(CODOPF2);
				State = 176; Match(T__8);
				State = 177; Match(T__7);
				State = 178; Match(REG);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179; Match(T__9);
				State = 180; Match(REG);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 181; Match(CODOPF2);
				State = 182; Match(T__8);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 183; Match(CODOPF2);
				State = 184; Match(T__8);
				State = 185; Match(T__7);
				State = 186; Match(NUM);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 187; Match(T__10);
				State = 188; Match(REG);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 189; Match(CODOPF2);
				State = 190; Match(REG);
				State = 191; Match(T__7);
				State = 192; Match(T__8);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 193; Match(CODOPF2);
				State = 194; Match(NUM);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 195; Match(CODOPF2);
				State = 196; Match(REG);
				State = 197; Match(T__7);
				State = 198; Match(NUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F3Context : ParserRuleContext {
		public Simple3Context simple3() {
			return GetRuleContext<Simple3Context>(0);
		}
		public Indirecto3Context indirecto3() {
			return GetRuleContext<Indirecto3Context>(0);
		}
		public Inmediato3Context inmediato3() {
			return GetRuleContext<Inmediato3Context>(0);
		}
		public F3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F3Context f3() {
		F3Context _localctx = new F3Context(_ctx, State);
		EnterRule(_localctx, 28, RULE_f3);
		try {
			State = 204;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; simple3();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; indirecto3();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; inmediato3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class F4Context : ParserRuleContext {
		public ITerminalNode EXT() { return GetToken(analizadorLSParser.EXT, 0); }
		public F3Context f3() {
			return GetRuleContext<F3Context>(0);
		}
		public F4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_f4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterF4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitF4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitF4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public F4Context f4() {
		F4Context _localctx = new F4Context(_ctx, State);
		EnterRule(_localctx, 30, RULE_f4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(EXT);
			State = 207; f3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public Simple3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterSimple3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitSimple3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple3Context simple3() {
		Simple3Context _localctx = new Simple3Context(_ctx, State);
		EnterRule(_localctx, 32, RULE_simple3);
		try {
			State = 222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 209; Match(CODOPF3);
				State = 210; Match(M);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; Match(CODOPF3);
				State = 212; Match(NUM);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 213; Match(CODOPF3);
				State = 214; Match(NUM);
				State = 215; Match(T__7);
				State = 216; Match(T__8);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217; Match(CODOPF3);
				State = 218; Match(M);
				State = 219; Match(T__7);
				State = 220; Match(T__8);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indirecto3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public Indirecto3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirecto3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterIndirecto3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitIndirecto3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirecto3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indirecto3Context indirecto3() {
		Indirecto3Context _localctx = new Indirecto3Context(_ctx, State);
		EnterRule(_localctx, 34, RULE_indirecto3);
		try {
			State = 233;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; Match(CODOPF3);
				State = 225; Match(T__12);
				State = 226; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227; Match(CODOPF3);
				State = 228; Match(T__12);
				State = 229; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; Match(CODOPF3);
				State = 231; Match(T__12);
				State = 232; opvalor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmediato3Context : ParserRuleContext {
		public ITerminalNode CODOPF3() { return GetToken(analizadorLSParser.CODOPF3, 0); }
		public ITerminalNode NUM() { return GetToken(analizadorLSParser.NUM, 0); }
		public ITerminalNode M() { return GetToken(analizadorLSParser.M, 0); }
		public OpvalorContext opvalor() {
			return GetRuleContext<OpvalorContext>(0);
		}
		public Inmediato3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmediato3; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterInmediato3(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitInmediato3(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmediato3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmediato3Context inmediato3() {
		Inmediato3Context _localctx = new Inmediato3Context(_ctx, State);
		EnterRule(_localctx, 36, RULE_inmediato3);
		try {
			State = 244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; Match(CODOPF3);
				State = 236; Match(T__13);
				State = 237; Match(NUM);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238; Match(CODOPF3);
				State = 239; Match(T__13);
				State = 240; Match(M);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241; Match(CODOPF3);
				State = 242; Match(T__13);
				State = 243; opvalor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpdirectivaContext : ParserRuleContext {
		public ITerminalNode CONSTHEX() { return GetToken(analizadorLSParser.CONSTHEX, 0); }
		public OpdirectivaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opdirectiva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.EnterOpdirectiva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IanalizadorLSListener typedListener = listener as IanalizadorLSListener;
			if (typedListener != null) typedListener.ExitOpdirectiva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IanalizadorLSVisitor<TResult> typedVisitor = visitor as IanalizadorLSVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpdirectiva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpdirectivaContext opdirectiva() {
		OpdirectivaContext _localctx = new OpdirectivaContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_opdirectiva);
		try {
			int _alt;
			State = 259;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(T__14);
				State = 247; Match(T__15);
				State = 248; Match(CONSTHEX);
				State = 249; Match(T__15);
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(T__16);
				State = 251; Match(T__15);
				State = 255;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 252;
						MatchWildcard();
						}
						} 
					}
					State = 257;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
				}
				State = 258; Match(T__15);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expresion_sempred((ExpresionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expresion_sempred(ExpresionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\x108\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x31\n\x2\x3\x3\x3\x3\x5\x3"+
		"\x35\n\x3\x3\x4\x3\x4\x5\x4\x39\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5?\n"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x45\n\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x5\bi\n\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x83"+
		"\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x91"+
		"\n\n\f\n\xE\n\x94\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x9C\n\v\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x5\r\xA4\n\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xCA\n\xF\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\xCF\n\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\xE1\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x13\x5\x13\xEC\n\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x14\x5\x14\xF7\n\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\a\x15\x100\n\x15\f\x15\xE\x15\x103\v\x15\x3\x15\x5"+
		"\x15\x106\n\x15\x3\x15\x3\x101\x2\x3\x12\x16\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2\x2\x2\x12B\x2\x30\x3\x2\x2\x2\x4\x34\x3\x2\x2\x2"+
		"\x6\x38\x3\x2\x2\x2\b>\x3\x2\x2\x2\n\x44\x3\x2\x2\x2\f\x46\x3\x2\x2\x2"+
		"\xEh\x3\x2\x2\x2\x10j\x3\x2\x2\x2\x12\x82\x3\x2\x2\x2\x14\x9B\x3\x2\x2"+
		"\x2\x16\x9D\x3\x2\x2\x2\x18\xA3\x3\x2\x2\x2\x1A\xA5\x3\x2\x2\x2\x1C\xC9"+
		"\x3\x2\x2\x2\x1E\xCE\x3\x2\x2\x2 \xD0\x3\x2\x2\x2\"\xE0\x3\x2\x2\x2$\xEB"+
		"\x3\x2\x2\x2&\xF6\x3\x2\x2\x2(\x105\x3\x2\x2\x2*+\x5\x4\x3\x2+,\a\x2\x2"+
		"\x3,\x31\x3\x2\x2\x2-.\x5\x4\x3\x2./\a$\x2\x2/\x31\x3\x2\x2\x2\x30*\x3"+
		"\x2\x2\x2\x30-\x3\x2\x2\x2\x31\x3\x3\x2\x2\x2\x32\x35\x5\x6\x4\x2\x33"+
		"\x35\x5\x14\v\x2\x34\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\x5\x3\x2"+
		"\x2\x2\x36\x39\x5\b\x5\x2\x37\x39\x5\n\x6\x2\x38\x36\x3\x2\x2\x2\x38\x37"+
		"\x3\x2\x2\x2\x39\a\x3\x2\x2\x2:;\x5\x16\f\x2;<\x5\f\a\x2<?\x3\x2\x2\x2"+
		"=?\x5\f\a\x2>:\x3\x2\x2\x2>=\x3\x2\x2\x2?\t\x3\x2\x2\x2@\x41\x5\x16\f"+
		"\x2\x41\x42\x5\xE\b\x2\x42\x45\x3\x2\x2\x2\x43\x45\x5\xE\b\x2\x44@\x3"+
		"\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45\v\x3\x2\x2\x2\x46G\x5\x18\r\x2G\r\x3"+
		"\x2\x2\x2HI\a\x18\x2\x2Ii\a\x3\x2\x2JK\a\x18\x2\x2Ki\x5\x10\t\x2LM\a\x19"+
		"\x2\x2Mi\x5(\x15\x2NO\a\x1A\x2\x2Oi\x5\x10\t\x2PQ\a\x1B\x2\x2Qi\x5\x10"+
		"\t\x2RS\a\x1C\x2\x2Si\x5\x10\t\x2TU\a\x1D\x2\x2Ui\a#\x2\x2VW\a\x1A\x2"+
		"\x2Wi\a \x2\x2XY\a\x1B\x2\x2Yi\a \x2\x2Z[\a\x1C\x2\x2[i\a \x2\x2\\]\a"+
		"\x1A\x2\x2]i\a\x3\x2\x2^_\a\x1C\x2\x2_i\a\x4\x2\x2`\x61\a\x1C\x2\x2\x61"+
		"i\a\x3\x2\x2\x62\x63\a\x1B\x2\x2\x63i\a\x4\x2\x2\x64\x65\a\x1B\x2\x2\x65"+
		"i\a\x3\x2\x2\x66g\a\x1E\x2\x2gi\x5\x12\n\x2hH\x3\x2\x2\x2hJ\x3\x2\x2\x2"+
		"hL\x3\x2\x2\x2hN\x3\x2\x2\x2hP\x3\x2\x2\x2hR\x3\x2\x2\x2hT\x3\x2\x2\x2"+
		"hV\x3\x2\x2\x2hX\x3\x2\x2\x2hZ\x3\x2\x2\x2h\\\x3\x2\x2\x2h^\x3\x2\x2\x2"+
		"h`\x3\x2\x2\x2h\x62\x3\x2\x2\x2h\x64\x3\x2\x2\x2h\x66\x3\x2\x2\x2i\xF"+
		"\x3\x2\x2\x2jk\a\"\x2\x2k\x11\x3\x2\x2\x2lm\b\n\x1\x2m\x83\a \x2\x2no"+
		"\x5\x16\f\x2op\a\x5\x2\x2pq\x5\x12\n\vq\x83\x3\x2\x2\x2rs\x5\x16\f\x2"+
		"st\a\x6\x2\x2tu\x5\x12\n\nu\x83\x3\x2\x2\x2vw\x5\x16\f\x2wx\a\a\x2\x2"+
		"xy\x5\x12\n\ty\x83\x3\x2\x2\x2z{\x5\x16\f\x2{|\a%\x2\x2|}\x5\x12\n\b}"+
		"\x83\x3\x2\x2\x2~\x7F\a\b\x2\x2\x7F\x80\x5\x12\n\x2\x80\x81\a\t\x2\x2"+
		"\x81\x83\x3\x2\x2\x2\x82l\x3\x2\x2\x2\x82n\x3\x2\x2\x2\x82r\x3\x2\x2\x2"+
		"\x82v\x3\x2\x2\x2\x82z\x3\x2\x2\x2\x82~\x3\x2\x2\x2\x83\x92\x3\x2\x2\x2"+
		"\x84\x85\f\x6\x2\x2\x85\x86\a\x5\x2\x2\x86\x91\x5\x12\n\a\x87\x88\f\x5"+
		"\x2\x2\x88\x89\a\x6\x2\x2\x89\x91\x5\x12\n\x6\x8A\x8B\f\x4\x2\x2\x8B\x8C"+
		"\a\a\x2\x2\x8C\x91\x5\x12\n\x5\x8D\x8E\f\x3\x2\x2\x8E\x8F\a%\x2\x2\x8F"+
		"\x91\x5\x12\n\x4\x90\x84\x3\x2\x2\x2\x90\x87\x3\x2\x2\x2\x90\x8A\x3\x2"+
		"\x2\x2\x90\x8D\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92"+
		"\x93\x3\x2\x2\x2\x93\x13\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x96\a\x1F"+
		"\x2\x2\x96\x9C\x5\x16\f\x2\x97\x98\a#\x2\x2\x98\x99\a\x1F\x2\x2\x99\x9C"+
		"\x5\x16\f\x2\x9A\x9C\a\x1F\x2\x2\x9B\x95\x3\x2\x2\x2\x9B\x97\x3\x2\x2"+
		"\x2\x9B\x9A\x3\x2\x2\x2\x9C\x15\x3\x2\x2\x2\x9D\x9E\a#\x2\x2\x9E\x17\x3"+
		"\x2\x2\x2\x9F\xA4\x5\x1A\xE\x2\xA0\xA4\x5\x1C\xF\x2\xA1\xA4\x5\x1E\x10"+
		"\x2\xA2\xA4\x5 \x11\x2\xA3\x9F\x3\x2\x2\x2\xA3\xA0\x3\x2\x2\x2\xA3\xA1"+
		"\x3\x2\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4\x19\x3\x2\x2\x2\xA5\xA6\a\x14\x2"+
		"\x2\xA6\x1B\x3\x2\x2\x2\xA7\xA8\a\x15\x2\x2\xA8\xCA\a \x2\x2\xA9\xAA\a"+
		"\x15\x2\x2\xAA\xAB\a\x17\x2\x2\xAB\xAC\a\n\x2\x2\xAC\xCA\a\x17\x2\x2\xAD"+
		"\xAE\a\x15\x2\x2\xAE\xAF\a\x17\x2\x2\xAF\xB0\a\n\x2\x2\xB0\xCA\a \x2\x2"+
		"\xB1\xB2\a\x15\x2\x2\xB2\xB3\a\v\x2\x2\xB3\xB4\a\n\x2\x2\xB4\xCA\a\x17"+
		"\x2\x2\xB5\xB6\a\f\x2\x2\xB6\xCA\a\x17\x2\x2\xB7\xB8\a\x15\x2\x2\xB8\xCA"+
		"\a\v\x2\x2\xB9\xBA\a\x15\x2\x2\xBA\xBB\a\v\x2\x2\xBB\xBC\a\n\x2\x2\xBC"+
		"\xCA\a \x2\x2\xBD\xBE\a\r\x2\x2\xBE\xCA\a\x17\x2\x2\xBF\xC0\a\x15\x2\x2"+
		"\xC0\xC1\a\x17\x2\x2\xC1\xC2\a\n\x2\x2\xC2\xCA\a\v\x2\x2\xC3\xC4\a\x15"+
		"\x2\x2\xC4\xCA\a \x2\x2\xC5\xC6\a\x15\x2\x2\xC6\xC7\a\x17\x2\x2\xC7\xC8"+
		"\a\n\x2\x2\xC8\xCA\a \x2\x2\xC9\xA7\x3\x2\x2\x2\xC9\xA9\x3\x2\x2\x2\xC9"+
		"\xAD\x3\x2\x2\x2\xC9\xB1\x3\x2\x2\x2\xC9\xB5\x3\x2\x2\x2\xC9\xB7\x3\x2"+
		"\x2\x2\xC9\xB9\x3\x2\x2\x2\xC9\xBD\x3\x2\x2\x2\xC9\xBF\x3\x2\x2\x2\xC9"+
		"\xC3\x3\x2\x2\x2\xC9\xC5\x3\x2\x2\x2\xCA\x1D\x3\x2\x2\x2\xCB\xCF\x5\""+
		"\x12\x2\xCC\xCF\x5$\x13\x2\xCD\xCF\x5&\x14\x2\xCE\xCB\x3\x2\x2\x2\xCE"+
		"\xCC\x3\x2\x2\x2\xCE\xCD\x3\x2\x2\x2\xCF\x1F\x3\x2\x2\x2\xD0\xD1\a%\x2"+
		"\x2\xD1\xD2\x5\x1E\x10\x2\xD2!\x3\x2\x2\x2\xD3\xD4\a\x16\x2\x2\xD4\xE1"+
		"\a#\x2\x2\xD5\xD6\a\x16\x2\x2\xD6\xE1\a \x2\x2\xD7\xD8\a\x16\x2\x2\xD8"+
		"\xD9\a \x2\x2\xD9\xDA\a\n\x2\x2\xDA\xE1\a\v\x2\x2\xDB\xDC\a\x16\x2\x2"+
		"\xDC\xDD\a#\x2\x2\xDD\xDE\a\n\x2\x2\xDE\xE1\a\v\x2\x2\xDF\xE1\a\xE\x2"+
		"\x2\xE0\xD3\x3\x2\x2\x2\xE0\xD5\x3\x2\x2\x2\xE0\xD7\x3\x2\x2\x2\xE0\xDB"+
		"\x3\x2\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1#\x3\x2\x2\x2\xE2\xE3\a\x16\x2\x2"+
		"\xE3\xE4\a\xF\x2\x2\xE4\xEC\a \x2\x2\xE5\xE6\a\x16\x2\x2\xE6\xE7\a\xF"+
		"\x2\x2\xE7\xEC\a#\x2\x2\xE8\xE9\a\x16\x2\x2\xE9\xEA\a\xF\x2\x2\xEA\xEC"+
		"\x5\x10\t\x2\xEB\xE2\x3\x2\x2\x2\xEB\xE5\x3\x2\x2\x2\xEB\xE8\x3\x2\x2"+
		"\x2\xEC%\x3\x2\x2\x2\xED\xEE\a\x16\x2\x2\xEE\xEF\a\x10\x2\x2\xEF\xF7\a"+
		" \x2\x2\xF0\xF1\a\x16\x2\x2\xF1\xF2\a\x10\x2\x2\xF2\xF7\a#\x2\x2\xF3\xF4"+
		"\a\x16\x2\x2\xF4\xF5\a\x10\x2\x2\xF5\xF7\x5\x10\t\x2\xF6\xED\x3\x2\x2"+
		"\x2\xF6\xF0\x3\x2\x2\x2\xF6\xF3\x3\x2\x2\x2\xF7\'\x3\x2\x2\x2\xF8\xF9"+
		"\a\x11\x2\x2\xF9\xFA\a\x12\x2\x2\xFA\xFB\a!\x2\x2\xFB\x106\a\x12\x2\x2"+
		"\xFC\xFD\a\x13\x2\x2\xFD\x101\a\x12\x2\x2\xFE\x100\v\x2\x2\x2\xFF\xFE"+
		"\x3\x2\x2\x2\x100\x103\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x101\xFF\x3\x2"+
		"\x2\x2\x102\x104\x3\x2\x2\x2\x103\x101\x3\x2\x2\x2\x104\x106\a\x12\x2"+
		"\x2\x105\xF8\x3\x2\x2\x2\x105\xFC\x3\x2\x2\x2\x106)\x3\x2\x2\x2\x14\x30"+
		"\x34\x38>\x44h\x82\x90\x92\x9B\xA3\xC9\xCE\xE0\xEB\xF6\x101\x105";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace SICXE
